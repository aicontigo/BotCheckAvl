// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BotCheckAvl.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250624094522_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("MonitoredService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxRetryes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResponseTimeWarningMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeoutMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MonitoredServices");
                });

            modelBuilder.Entity("PingHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonitoredServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ResponseTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoredServiceId");

                    b.ToTable("PingHistories");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TelegramUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MonitoredService", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PingHistory", b =>
                {
                    b.HasOne("MonitoredService", "MonitoredService")
                        .WithMany("History")
                        .HasForeignKey("MonitoredServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonitoredService");
                });

            modelBuilder.Entity("MonitoredService", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
